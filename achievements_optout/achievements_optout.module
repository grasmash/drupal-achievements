<?php

/**
 * @file
 * Allows users to opt-out of achievements entirely.
 */

/**
 * Implements hook_user_update().
 */
function achievements_optout_user_update(&$edit, $account, $category) {
  if ($account->achievements_optout[LANGUAGE_NONE][0]['value'] == 1) {
    achievements_user_delete($account);
  }
}

/**
 * Implements hook_page_alter().
 *
 * I didn't really want to use hook_page_alter(), but preprocess hooks or
 * theme registry alters had their own set of problems (inability to remove
 * stats entirely, to put a nicely formatted message somewhere, etc.).
 */
function achievements_optout_page_alter(&$page) {
  if (arg(0) == 'user' && arg(2) == 'achievements') {
    $account = menu_get_object('user'); // count() first to prevent warnings on old users prior to optout module enabling.
    if (isset($account) && count($account->achievements_optout) && $account->achievements_optout[LANGUAGE_NONE][0]['value'] == 1) {
      unset($page['content']['system_main']['achievements']['tabs']);
      unset($page['content']['system_main']['achievements']['stats']);
      $page['content']['system_main']['achievements']['optout'] = array(
        '#markup' => t('This user has chosen not to participate in or unlock achievements.'),
      );
    }
  }
}

/**
 * Implements hook_achievements_access_earn().
 */
function achievements_optout_achievements_access_earn($uid) {
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'user')
    ->entityCondition('entity_id', $uid, '=')
    ->fieldCondition('achievements_optout', 'value', 1);
  $result = $query->execute();

  // results? you opted for no access.
  return count($result) ? FALSE : TRUE;
}